@model IEnumerable<CorretoraABC.Dominio.Entidades.PrecoAtivo>

@{
    ViewData["Title"] = "Index";
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <script type="text/javascript" src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <script type="text/javascript" src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
    <script type="text/javascript" src="https://canvasjs.com/assets/script/canvasjs.stock.min.js"></script>
    <title>Corretora ABC</title>
</head>
<body>
    <div id="chartContainer"></div>

    @* <script type="text/javascript">
        window.onload = function () {
        var dataPoints = [];
        dataPoints = @Html.Raw(ViewBag.DataPoints);
        var chart = new CanvasJS.Chart("chartContainer", {
        theme: "light2",
        zoomEnabled: true,
        animationEnabled: true,
        title: {
        text: "Historical Price"
        },
        axisY: {
        title: "Close Value",
        titleFontSize: 24
        },
        axisX: {
        labelFormatter: function (e) {
        return CanvasJS.formatDate( e.value, "DD-MMM-YY");
        },
        },
        data: [
        {
        type: "line",
        yValueFormatString: "$#,##0.##",
        xValueType: "dateTime",
        dataPoints: dataPoints
        }
        ]
        });

        chart.render();
        };
        </script>*@

    @*<script type="text/javascript">
        window.onload = function () {
        var dataPoints = [];
        var chart = new CanvasJS.Chart("chartContainer", {
        theme: "light2",
        zoomEnabled: true,
        animationEnabled: true,
        title: {
        text: "Historical Price"
        },
        axisY: {
        title: "Close Value",
        titleFontSize: 24
        },
        axisX: {
        labelFormatter: function (e) {
        return CanvasJS.formatDate( e.value, "DD-MMM-YY");
        },
        },
        data: [
        {
        type: "line",
        yValueFormatString: "$#,##0.##",
        xValueType: "dateTime",
        dataPoints: dataPoints
        }]
        });

        function addData(data) {
        for (var i = 0; i < data.length; i++) {
        dataPoints.push({
        x: new Date(data[i].x),
        y: data[i].y
        });
        }
        chart.render();
        }
        $.getJSON("/PrecoAtivo/json", addData);
        }
        </script>*@
    
    @*<script type="text/javascript">
        window.onload = function () {
	        var dataPoints = [];
	        var result = @Html.Raw(ViewBag.DataPoints);

	        for(var i = 0; i < result.length; i++){
		        dataPoints.push({
			        x:result[i].x,
			        y:result[i].y});
	        }

	        var chart = new CanvasJS.Chart("chartContainer", {
		        theme: "light2",
		        zoomEnabled: true,
		        animationEnabled: true,
		        title: {
			        text: "Historical Price"
		        },
		        axisY: {
				        title: "Close Value",
				        titleFontSize: 24
			        },
		        axisX: {
			        labelFormatter: function (e) {
				        return CanvasJS.formatDate( e.value, "DD-MMM-YY");
			        },
		        },
		        data: [
		        {
			        type: "line",
			        yValueFormatString: "$#,##0.##",
			        xValueType: "dateTime",
			        dataPoints: dataPoints
		        }
		        ]
	        });

	        chart.render();
    }
    </script>*@

    @*<script type="text/javascript" src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
    <script type="text/javascript" src="https://canvasjs.com/assets/script/canvasjs.stock.min.js"></script>
    <script type="text/javascript">
        window.onload = function () {
        var dps1 = [], dps2= [];
        var stockChart = new CanvasJS.StockChart("chartContainer",{
        title:{
        text:"Technical Indicators: SMA"
        },
        subtitles: [{
        text:"Simple Moving Average"
        }],
        charts: [{
        axisY: {
        prefix: "$"
        },
        legend: {
        verticalAlign: "top",
        cursor: "pointer",
        itemclick: function (e) {
        if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
        e.dataSeries.visible = false;
        } else {
        e.dataSeries.visible = true;
        }
        e.chart.render();
        }
        },
        toolTip: {
        shared: true
        },
        data: [{
        type: "candlestick",
        showInLegend: true,
        name: "Stock Price",
        yValueFormatString: "$#,###.00",
        xValueType: "dateTime",
        dataPoints : dps1
        }],
        }],
        navigator: {
        data: [{
        dataPoints: dps2
        }],
        slider: {
        minimum: new Date(2018, 03, 01),
        maximum: new Date(2018, 05, 01)
        }
        }
        });
        $.getJSON("/PrecoAtivo/json", function(data) {
        for(var i = 0; i < data.length; i++){
        dps1.push({x: new Date(data[i].Date), y: [Number(data[i].OpenPrice), Number(data[i].HighPrice), Number(data[i].LowPrice), Number(data[i].ClosePrice)]});
        dps2.push({x: new Date(data[i].Date), y: Number(data[i].ClosePrice)});
        }
        stockChart.render();
        var sma = calculateSMA(dps1, 7);
        stockChart.charts[0].addTo("data", { type: "line", dataPoints: sma, showInLegend: true, yValueFormatString: "$#,###.00", name: "Simple Moving Average"})
        });
        function calculateSMA(dps, count){
        var avg = function(dps){
        var sum = 0, count = 0, val;
        for (var i = 0; i < dps.length; i++) {
        val = dps[i].y[3]; sum += val; count++;
        }
        return sum / count;
        };
        var result = [], val;
        count = count || 5;
        for (var i=0; i < count; i++)
        result.push({ x: dps[i].x , y: null});
        for (var i=count - 1, len=dps.length; i < len; i++){
        val = avg(dps.slice(i - count + 1, i));
        if (isNaN(val))
        result.push({ x: dps[i].x, y: null});
        else
        result.push({ x: dps[i].x, y: val});
        }
        return result;
        }
        }
    </script>*@

    @*<script type="text/javascript" src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
        <script type="text/javascript" src="https://canvasjs.com/assets/script/canvasjs.stock.min.js"></script>
        <script type="text/javascript">
        window.onload = function () {
        var dps1 = [], dps2= [];
        var stockChart = new CanvasJS.StockChart("chartContainer",{
        theme: "light2",
        title:{
        text:"Technical Indicators: EMA"
        },
        subtitles: [{
        text: "Exponential Moving Average"
        }],
        charts: [{
        axisY: {
        prefix: "$"
        },
        toolTip: {
        shared: true
        },
        legend: {
        cursor: "pointer",
        verticalAlign: "top",
        itemclick: function (e) {
        if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
        e.dataSeries.visible = false;
        } else {
        e.dataSeries.visible = true;
        }
        e.chart.render();
        }
        },
        data: [{
        type: "candlestick",
        name: "Stock Price",
        showInLegend: true,
        yValueFormatString: "$#,###.##",
        xValueType: "dateTime",
        dataPoints : dps1
        }],
        }],
        navigator: {
        data: [{
        dataPoints: dps2
        }],
        slider: {
        minimum: new Date(2018, 03, 01),
        maximum: new Date(2018, 05, 01)
        }
        }
        });
        $.getJSON("/PrecoAtivo/json", function(data) {
        for(var i = 0; i < data.length; i++){
        dps1.push({x: new Date(data[i].Date), y: [Number(data[i].OpenPrice), Number(data[i].HighPrice), Number(data[i].LowPrice), Number(data[i].ClosePrice)]});
        dps2.push({x: new Date(data[i].Date), y: Number(data[i].ClosePrice)});
        }
        stockChart.render();
        var ema = calculateEMA(dps1, 7);
        stockChart.charts[0].addTo("data", {type: "line", name: "EMA", showInLegend: true, yValueFormatString: "$#,###.##", dataPoints: ema});
        });
        function calculateEMA(dps,count) {
        var k = 2/(count + 1);
        var emaDps = [{x: dps[0].x, y: dps[0].y.length ? dps[0].y[3] : dps[0].y}];
        for (var i = 1; i < dps.length; i++) {
        emaDps.push({x: dps[i].x, y: (dps[i].y.length ? dps[i].y[3] : dps[i].y) * k + emaDps[i - 1].y * (1 - k)});
        }
        return emaDps;
        }
        }
        </script>*@

    @*<script type="text/javascript">
        window.onload = function () {
        var dps1 = [], dps2= [];
        var stockChart = new CanvasJS.StockChart("chartContainer_MACD",{
        theme: "light2",
        title:{
        text:"MACD"
        },
        charts: [{
        legend: {
        verticalAlign: "top",
        horizontalAlign: "left"
        },
        axisX: {
        tickLength: 0,
        lineThickness: 5,
        labelFormatter: function(e) {
        return "";
        }
        },
        axisY: {
        prefix: "$"
        },
        data: [{
        type: "candlestick",
        name: "Stock Price",
        yValueFormatString: "$#,###.##",
        dataPoints : dps1
        }],
        }],
        navigator: {
        data: [{
        dataPoints: dps2
        }],
        slider: {
        minimum: new Date(2018, 03, 01),
        maximum: new Date(2018, 05, 01)
        }
        }
        });
        $.getJSON("/PrecoAtivo/json", function(data) {
        for(var i = 0; i < data.length; i++){
        dps1.push({x: new Date(data[i].Date), y: [Number(data[i].OpenPrice), Number(data[i].HighPrice), Number(data[i].LowPrice), Number(data[i].ClosePrice)]});
        dps2.push({x: new Date(data[i].Date), y: Number(data[i].ClosePrice)});
        }
        stockChart.render();
        var ema12 = calculateEMA(dps1, 12),
        ema26 = calculateEMA(dps1, 26),
        macd = [], ema9;
        for(var i = 0; i < ema12.length; i++) {
        macd.push({x: ema12[i].x, y: (ema12[i].y - ema26[i].y)});
        }
        var ema9 = calculateEMA(macd, 9);
        stockChart.addTo("charts", {height: 100, data: [{type: "line", name: "MACD", showInLegend: true, dataPoints: macd}], legend: {horizontalAlign: "left"}, toolTip: {shared: true}});
        stockChart.charts[1].addTo("data", {type: "line", name: "Signal", showInLegend: true, dataPoints: ema9});
        });
        function calculateEMA(dps,mRange) {
        var k = 2/(mRange + 1);
        emaDps = [{x: dps[0].x, y: dps[0].y.length ? dps[0].y[3] : dps[0].y}];
        for (var i = 1; i < dps.length; i++) {
        emaDps.push({x: dps[i].x, y: (dps[i].y.length ? dps[i].y[3] : dps[i].y) * k + emaDps[i - 1].y * (1 - k)});
        }
        return emaDps;
        }
        }
        </script>*@

<script type="text/javascript">

	window.onload = function () {
		var dataPoints = [];
		var result = @Html.Raw(ViewBag.DataPoints);

		for(var i = 0; i < result.length; i++){
			dataPoints.push({
				x:result[i].x,
				y:result[i].y});
		}

		var chart = new CanvasJS.Chart("chartContainer", {
			theme: "light2",
			zoomEnabled: true,
			animationEnabled: true,
			title: {
				text: "Historical Price"
			},
			axisY: {
					title: "Close Value",
					titleFontSize: 24
				},
			axisX: {
				labelFormatter: function (e) {
					return CanvasJS.formatDate( e.value, "DD-MMM-YY");
				},
			},
			data: [
			{
				type: "line",
				yValueFormatString: "$#,##0.##",
				xValueType: "dateTime",
				dataPoints: dataPoints
			}
			]
		});

		chart.render();

		var dps1 = [], dps2= [];
        var stockChartEMA = new CanvasJS.StockChart("chartContainerEMA",{
			theme: "light2",
			title:{
				text:"EMA"
			},
			charts: [{
				axisY: {
					prefix: "$"
				},
				toolTip: {
					shared: true
				},
				legend: {
					cursor: "pointer",
					verticalAlign: "top",
					itemclick: function (e) {
						if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
							e.dataSeries.visible = false;
						} else {
							e.dataSeries.visible = true;
						}
						e.chart.render();
					}
				},
				data: [{
					type: "candlestick",
					name: "Stock Price",
					showInLegend: true,
					yValueFormatString: "$#,###.##",
					xValueType: "dateTime",
					dataPoints : dps1
				}],
			}],
			navigator: {
				data: [{
					dataPoints: dps2
				}],
				slider: {
					minimum: new Date(2018, 03, 01),
					maximum: new Date(2018, 05, 01)
				}
			}
        });
		var stockChartMCAD = new CanvasJS.StockChart("chartContainerMACD",{
			theme: "light2",
			title:{
				text:"MACD"
			},
			charts: [{
				legend: {
					verticalAlign: "top",
				horizontalAlign: "left"
				},
				axisX: {
					tickLength: 0,
					lineThickness: 5,
					labelFormatter: function(e) {
						return "";
					}
				},
				axisY: {
					prefix: "$"
				},
				data: [{
					type: "candlestick",
					name: "Stock Price",
					yValueFormatString: "$#,###.##",
					dataPoints : dps1
				}],
			}],
			navigator: {
				data: [{
					dataPoints: dps2
				}],
				slider: {
					minimum: new Date(2018, 03, 01),
					maximum: new Date(2018, 05, 01)
				}
			}
        });
		
		$.getJSON("/PrecoAtivo/json", function(data) {
			for(var i = 0; i < data.length; i++){
				dps1.push({x: new Date(data[i].Date), y: [Number(data[i].OpenPrice), Number(data[i].HighPrice), Number(data[i].LowPrice), Number(data[i].ClosePrice)]});
				dps2.push({x: new Date(data[i].Date), y: Number(data[i].ClosePrice)});
			}
			stockChartEMA.render();
			var sma = calculateSMA(dps1, 7);
			stockChartEMA.charts[0].addTo("data", { type: "line", dataPoints: sma, showInLegend: true, yValueFormatString: "$#,###.00", name: "Simple Moving Average"})
			
			stockChartMCAD.render();
			var ema12 = calculateEMA(dps1, 12),
				ema26 = calculateEMA(dps1, 26),
				macd = [], ema9;
			for(var i = 0; i < ema12.length; i++) {
				macd.push({x: ema12[i].x, y: (ema12[i].y - ema26[i].y)});
			}
			var ema9 = calculateEMA(macd, 9);
			stockChartMCAD.addTo("charts", {height: 100, data: [{type: "line", name: "MACD", showInLegend: true, dataPoints: macd}], legend: {horizontalAlign: "left"}, toolTip: {shared: true}});
			stockChartMCAD.charts[1].addTo("data", {type: "line", name: "Signal", showInLegend: true, dataPoints: ema9});
        });
        function calculateEMA(dps,mRange) {
			var k = 2/(mRange + 1);
			emaDps = [{x: dps[0].x, y: dps[0].y.length ? dps[0].y[3] : dps[0].y}];
			for (var i = 1; i < dps.length; i++) {
				emaDps.push({x: dps[i].x, y: (dps[i].y.length ? dps[i].y[3] : dps[i].y) * k + emaDps[i - 1].y * (1 - k)});
			}
			return emaDps;
        }
       
		function calculateSMA(dps, count){
			var avg = function(dps){
				var sum = 0, count = 0, val;
				for (var i = 0; i < dps.length; i++) {
					val = dps[i].y[3]; sum += val; count++;
				}
				return sum / count;
			};
			var result = [], val;
			count = count || 5;
			for (var i=0; i < count; i++)
				result.push({ x: dps[i].x , y: null});
			for (var i=count - 1, len=dps.length; i < len; i++){
				val = avg(dps.slice(i - count + 1, i));
				if (isNaN(val))
					result.push({ x: dps[i].x, y: null});
				else
					result.push({ x: dps[i].x, y: val});
			}
			return result;
        }
    }
</script>
    <div id="chartContainer" style="width:100%; height:400px;"> </div>
    <div id="chartContainerEMA" style="width:100%; height:600px;"> </div>
    <div id="chartContainerMACD" style="width:100%; height:600px;"> </div>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Date)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.OpenPrice)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HighPrice)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LowPrice)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ClosePrice)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.AdjClosePrice)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Volume)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Date)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OpenPrice)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.HighPrice)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LowPrice)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ClosePrice)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.AdjClosePrice)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Volume)
                    </td>
                </tr>
            }
        </tbody>
    </table>
</body>
</html>
